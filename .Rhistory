vecpobspl = function(M,n,beta,lambda,seed){
pobspl = function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
}
vec=numeric()
for(i in 1:M){
vec[i]=pobspl(n,beta,lambda,seed) #ir uses the function specified before
}
return(vec)
}
vecpobspl(1000,1000,c(0,1),1/3,123)
vecpobspl(1000,1000,c(0,1),1/5,123)
vecpobspl = function(M,n,beta,lambda,seed){
vec=numeric()
for(i in 1:M){
vec[i]=function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
} #ir uses the function specified before
}
return(vec)
}
vecpobspl(1000,1000,c(0,1),1/5,123)
vecpobspl = function(M,n,betavec,lambda,seed){
vec=numeric()
for(i in 1:M){
vec[i]=function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
} #ir uses the function specified before
}
return(vec)
}
vecpobspl(1000,1000,c(0,1),1/5,123)
vecpobspl = function(M,n,beta,lambda,seed){
pobspl = function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
}
vec=numeric()
for(i in 1:M){
vec[i]=pobspl(n,beta,lambda,seed) #ir uses the function specified before
}
return(vec)
}
vecpobspl(1000,1000,c(0,1),1/5,123)
vecpobspl = function(M,n,beta,lambda,seed){
pobspl = function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
}
vec=numeric()
for(i in 1:M){
vec[i]=pobspl(n,beta,lambda,seed) #ir uses the function specified before
}
return(vec)
}
vecpobspl(1000,1000,c(0,1),1/5,123)
vecpl = function(M,n,beta,lambda,seed){
genmean = function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
}
vec=numeric()
for(i in 1:M){
vec[i]=genmean(n,beta,lambda,seed) #ir uses the function specified before
}
return(vec)
}
######################################################
dat <- data.frame(propor = c(vecpl(1000,1000,c(0,1),1/3,123),vecpl(1000,1000,c(0,1),0.5,123),vecpl(1000,1000,c(0,1),1,123),
vecpl(1000,1000,c(0,1),2,123),vecpl(1000,1000,c(0,1),3,123)),
Lambda = c(rep("0.333",1000),rep("0.5",1000),rep("1",1000),rep("2",1000),rep("3",1000)))
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_grey() + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1)) + geom_hline(yintercept = 0)
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,300)) + geom_hline(yintercept = 0)
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 70) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,300)) + geom_hline(yintercept = 0)
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 50) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,300)) + geom_hline(yintercept = 0)
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,300)) + geom_hline(yintercept = 0)
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="RdBu")  + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,300)) + geom_hline(yintercept = 0)
M=100
dat <- data.frame(propor = c(vecpl(M,1000,c(0,1),1/3,123),vecpl(M,1000,c(0,1),0.5,123),vecpl(M,1000,c(0,1),1,123),
vecpl(M,1000,c(0,1),2,123),vecpl(M,1000,c(0,1),3,123)),
Lambda = c(rep("0.333",M,rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#gris
M=100
dat <- data.frame(propor = c(vecpl(M,1000,c(0,1),1/3,123),vecpl(M,1000,c(0,1),0.5,123),vecpl(M,1000,c(0,1),1,123),
vecpl(M,1000,c(0,1),2,123),vecpl(M,1000,c(0,1),3,123)),
Lambda = c(rep("0.333",M,rep("0.5",M),rep("1",M),rep("2",M),rep("3",M))))
M=100
dat <- data.frame(propor = c(vecpl(M,1000,c(0,1),1/3,123),vecpl(M,1000,c(0,1),0.5,123),vecpl(M,1000,c(0,1),1,123),
vecpl(M,1000,c(0,1),2,123),vecpl(M,1000,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M))))
M=100
dat <- data.frame(propor = c(vecpl(M,1000,c(0,1),1/3,123),vecpl(M,1000,c(0,1),0.5,123),vecpl(M,1000,c(0,1),1,123),
vecpl(M,1000,c(0,1),2,123),vecpl(M,1000,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,300)) + geom_hline(yintercept = 0)
#azul
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,50)) + geom_hline(yintercept = 0)
#azul
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1),ylim = c(0,30)) + geom_hline(yintercept = 0)
#g
#azul
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0.15,0.85),ylim = c(0,30)) + geom_hline(yintercept = 0)
#
n=100
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#azul
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0.15,0.85),ylim = c(0,30)) + geom_hline(yintercept = 0)
M=100
n=500
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#azul
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0.15,0.85),ylim = c(0,30)) + geom_hline(yintercept = 0)
M=100
n=1000
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#gris
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0.15,0.85),ylim = c(0,30)) + geom_hline(yintercept = 0)
vecpl = function(M,n,beta,lambda,seed){
genmean = function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
}
vec=numeric()
for(i in 1:M){
vec[i]=genmean(n,beta,lambda,seed) #ir uses the function specified before
}
return(vec)
}
M=100
n=1000
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#gris
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_grey() + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1)) + geom_hline(yintercept = 0)
library(ggplot2)
M=100
n=1000
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#gris
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_grey() + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1)) + geom_hline(yintercept = 0)
#azul
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_brewer(palette="Blues") + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0.15,0.85),ylim = c(0,30)) + geom_hline(yintercept = 0)
EN2004Skew <- read.csv("~/Dropbox/Susan/aplicacion/EN2004/data/EN2004Skew.csv")
#############################################################
library(ggplot2)
ggplot(EN2004Skew, aes(x=BINLM, y=REND_COM)) +
geom_boxplot()
ggplot(EN2004Skew, aes(x=factor(BINLM), y=REND_COM)) +
geom_boxplot()
ggplot(EN2004Skew, aes(x=factor(BINLM), y=REND_COM, color=factor(BINLM))) +
geom_boxplot()
ggplot(EN2004Skew, aes(x=factor(BINLM), y=REND_COM, color=factor(BINLM))) +
geom_boxplot() +
labs(y = "Desempenho em comunicação", x = "Desempenho em matemática")
ggplot(EN2004Skew, aes(x=factor(BINLM), y=REND_COM)) +
geom_boxplot() +
labs(y = "Desempenho em comunicação", x = "Desempenho em matemática")
ggplot(EN2004Skew, aes(x=factor(BINLM, levels = c("Não adequado", "Adequado"), labels = levels), y=REND_COM)) +
geom_boxplot() +
labs(y = "Desempenho em comunicação", x = "Desempenho em matemática")
ggplot(EN2004Skew, aes(x=factor(BINLM, labels = c("Não adequado", "Adequado")), y=REND_COM)) +
geom_boxplot() +
labs(y = "Desempenho em comunicação", x = "Desempenho em matemática")
EN2004Skew <- read.csv("~/Dropbox/Susan/aplicacion/EN2004/data/EN2004Skew.csv")
subset(EN2004Skew, BINLM==0)
subset(EN2004Skew, BINLM==1)
nadeq = subset(EN2004Skew, BINLM==0)
adeq = subset(EN2004Skew, BINLM==1)
min(c(1,2,3,4))
max(c(1,2,3,4))
min(nadeq$REND_COM)
max(nadeq$REND_COM)
min(adeq$REND_COM)
max(adeq$REND_COM)
require(verification)
install.packages("verification")
require(verification)
a<- c(0,0,0,1,1,1,0,1,1,0,0,0,0,1,1) #y
b<- c(.8, .8, 0, 1,1,.6, .4, .8, 0, 0, .2, 0, 0, 1,1) #propred plugin
A<- data.frame(a,b)
names(A)<- c("event", "p1")
roc.plot(A$event, A$p1)
roc.area(A$event, A$p1)
load("/home/susan/Rda/EN2004/1/plfit.Rda")
vecpl = function(M,n,beta,lambda,seed){
genmean = function(n,betavec,lambda,seed){
beta0<-betavec[1]
beta<-betavec[-1]
set.seed(seed)
X<-matrix(runif(n*NROW(beta),-3,3),ncol=NROW(beta))
p<-plogis(beta0+X%*%beta)
prob<-p**lambda
rm(list=".Random.seed", envir=globalenv())
y <- numeric()
for(i in 1:n){y[i]<-rbinom(1,1,prob[i])}
return(mean(y))
}
vec=numeric()
for(i in 1:M){
vec[i]=genmean(n,beta,lambda,seed) #it uses the function specified before
}
return(vec)
}
######################################################
M=100
n=1000
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#gris
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_grey() + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1)) + geom_hline(yintercept = 0)
library(ggplot2)
library(ggplot2)
######################################################
M=100
n=1000
dat <- data.frame(propor = c(vecpl(M,n,c(0,1),1/3,123),vecpl(M,n,c(0,1),0.5,123),vecpl(M,n,c(0,1),1,123),
vecpl(M,n,c(0,1),2,123),vecpl(M,n,c(0,1),3,123)),
Lambda = c(rep("0.333",M),rep("0.5",M),rep("1",M),rep("2",M),rep("3",M)))
#gris
ggplot(dat, aes(x=propor, color=Lambda, fill = Lambda)) +
geom_histogram(col="black", bins = 80) +
scale_color_grey()+scale_fill_grey() + labs(x="Proporção", y = "Frequência") + theme_light() +
coord_cartesian(xlim = c(0,1)) + geom_hline(yintercept = 0)
#gris
ggplot(dat, aes(x=Lambda, y=propor, fill=Lambda)) + geom_boxplot() +
labs(y="Proporção") + scale_fill_grey() + theme_light() + coord_cartesian(ylim = c(0,1))
a<- c(0,0,0,1,1,1,0,1,1,0,0,0,0,1,1) #y
b<- c(.8, .8, 0, 1,1,.6, .4, .8, 0, 0, .2, 0, 0, 1,1) #propred plugin
A<- data.frame(a,b)
View(A)
y
yp
#incluir objeto de grafico en la lista
load("/home/susan/Rda/EN2004/1/plfit.Rda")
stanfit = plStan
y = EN2004Skew$bin
yp = colMeans(extract(stanfit, "prob",permuted=F))
roc.plot(y, yp)
roc.area(y, yp)
library(rstan)
y = EN2004Skew$bin
yp = colMeans(extract(stanfit, "prob",permuted=F))
roc.plot(y, yp)
roc.area(y, yp)
roc.plot(y, yp)
yp
colMeans(extract(stanfit, "prob",permuted=F))
NCOL(y)
NROW(y)
NROW(yp)
NCOL(yp)
head(colMeans(extract(plStan, "prob",permuted=F)))
array(colMeans(extract(plStan, "prob",permuted=F)))
head(array(colMeans(extract(plStan, "prob",permuted=F))))
#incluir objeto de grafico en la lista
library(rstan)
load("/home/susan/Rda/EN2004/1/plfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(plStan, "prob",permuted=F)))
roc.plot(y, yp)
roc.area(y, yp)
load("/home/susan/Rda/EN2004/1/plrfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(plrStan, "prob",permuted=F)))
roc.plot(y, yp)
roc.area(y, yp)
load("/home/susan/Rda/EN2004/1/ppfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(ppStan, "prob",permuted=F)))
roc.plot(y, yp)
roc.area(y, yp)
load("/home/susan/Rda/EN2004/1/pprfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(pprStan, "prob",permuted=F)))
roc.plot(y, yp)
roc.area(y, yp)
roc.plot(y, yp, main = "Rkis", xlab = "Fsssarm Rate",
ylab = "Hit ste")
rm(plStan)
citation()
rm(ppStan)
rm(pprStan)
rm(plrStan)
citation("ggplot2")
citation("loo")
citation("verification")
load("/home/susan/Rda/EN2004/1/pprfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(pprStan, "prob",permuted=F)))
roc.plot(y, yp, main = NULL, xlab = "Fsssarm Rate", ylab = "Hit ste")
roc.plot(y, yp, main = NULL, xlab = "Fsssarm Rate", ylab = "Hit")
rm(stanfit)
roc.plot(y, yp, main = NULL, xlab = "1-Especificidade", ylab = "Sensibilidade")
roc.area(y, yp)
corte = seq(0.1, 0.9, by = 0.1)
EN2004Skew <- read.csv("~/Dropbox/Susan/aplicacion/EN2004/data/EN2004Skew.csv")
colnames(EN2004Skew) <- c("area","gestion","rend","sexo","bin")
prep <- function(dataset,y,xm){
dat = list(n = nrow(dataset),
y = y,
X = xm,
k = NCOL(xm))
}
dat <- prep(EN2004Skew, EN2004Skew$bin, cbind(EN2004Skew$area,EN2004Skew$gestion,EN2004Skew$rend,EN2004Skew$sexo))
library(rstan)
load("/home/susan/Rda/EN2004/1/plfit.Rda")
require(verification)
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(plStan, "prob",permuted=F)))
roc.plot(y, yp, main = NULL, xlab = "1-Especificidade", ylab = "Sensibilidade")
roc.area(y, yp)
rm(plStan)
load("/home/susan/Rda/EN2004/1/plrfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(plrStan, "prob",permuted=F)))
roc.plot(y, yp, main = NULL, xlab = "1-Especificidade", ylab = "Sensibilidade")
roc.area(y, yp)
rm(plrStan)
load("/home/susan/Rda/EN2004/1/ppfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(ppStan, "prob",permuted=F)))
roc.plot(y, yp, main = NULL, xlab = "1-Especificidade", ylab = "Sensibilidade")
roc.area(y, yp)
rm(ppStan)
load("/home/susan/Rda/EN2004/1/pprfit.Rda")
y = EN2004Skew$bin #de tamanho 13259
yp = array(colMeans(extract(pprStan, "prob",permuted=F)))
roc.plot(y, yp, main = NULL, xlab = "1-Especificidade", ylab = "Sensibilidade")
roc.area(y, yp)
rm(pprStan)
cite("glm")
library(glm)
cite("stats")
cite(stats)
EN2004Skew <- read.csv("~/Dropbox/Susan/aplicacion/EN2004/data/EN2004Skew.csv")
library(rstan)
setwd("/home/susan/Dropbox/Susan/codigos/modelos/stan matrix/")
load("/home/susan/Rda/EN2004/1/plrfit.Rda")
summary(plrStan)
colMeans(extract (plrStan, c("beta0","beta","lambda"),permuted=F))
head(summary(plrStan))
colMeans(extract (plrStan, c("lambda"),permuted=F))
colMeans(extract (plrStan, c("beta"),permuted=F))
colMeans(extract (plrStan, c("beta[1]"),permuted=F))
colMeans(extract (plrStan, c("beta[4]"),permuted=F))
mean(extract (plrStan, c("beta[4]"),permuted=F))
median(extract (plrStan, c("beta[4]"),permuted=F))
colMeans(extract (plrStan, c("lambda"),permuted=F))
mean(extract (plrStan, c("lambda"),permuted=F))
median(extract (plrStan, c("lambda"),permuted=F))
library("shinystan", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
launch_shinystan(plrStan)
#HPD INTERVALS
hpd <- function (stanfit, prob, tipo) {
library(coda)
library(rstan)
if(tipo== 1)
{
b0 = extract(stanfit,"beta0")$beta0
b <- extract(stanfit,"beta")$beta
k <- ncol(b) + 1 #numero de columnas considerando b0
param <- c()
param <- as.data.frame(param)
param[1,1] <- HPDinterval(as.mcmc(as.vector(b0)),prob = prob)[1,1]
param[1,2] <- HPDinterval(as.mcmc(as.vector(b0)),prob = prob)[1,2]
for(i in 2:k){
param[i,1] <- HPDinterval(as.mcmc(as.vector(b[,i-1])),prob = prob)[1,1]
param[i,2] <- HPDinterval(as.mcmc(as.vector(b[,i-1])),prob = prob)[1,2]
}
colnames(param) <- c("lower","upper")
return(param)
}
else if(tipo == 2) {
b0 = extract(stanfit,"beta0")$beta0
b <- extract(stanfit,"beta")$beta
k <- ncol(b) + 1
param <- c()
param <- as.data.frame(param)
param[1,1] <- HPDinterval(as.mcmc(as.vector(b0)),prob = prob)[1,1]
param[1,2] <- HPDinterval(as.mcmc(as.vector(b0)),prob = prob)[1,2]
for(i in 2:k){
param[i,1] <- HPDinterval(as.mcmc(as.vector(b[,i-1])),prob = prob)[1,1]
param[i,2] <- HPDinterval(as.mcmc(as.vector(b[,i-1])),prob = prob)[1,2]
}
lamb <- extract(stanfit , "lambda" , inc_warmup=FALSE, permuted = F )
param[k+1,1] <- HPDinterval(as.mcmc(as.vector(lamb)),prob = prob)[1,1]
param[k+1,2] <- HPDinterval(as.mcmc(as.vector(lamb)),prob = prob)[1,2]
colnames(param) <- c("lower","upper")
return(param)
}
}
hpd(plrStan,0.95,2)
